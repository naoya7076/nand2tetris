// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // flag for ARegister
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);
    And(a=isC, b=instruction[5], out=ALUtoA);

    // Mux previous ARegister
    Mux16(a=ALUout,b=instruction,sel=isA,out=outMu);

    // ARegister
    Or(a=ALUtoA,b=isA,out=loadA);
    ARegister(in=outMu,load=loadA,out=A,out=out);

    // Define mnemonic(A or M)
    Mux16(a=A,b=inM,sel=instruction[12],out=AM);

    // DRegister
    And(a=isC, b=instruction[4], out=loadD);
    DRegister(in=outMu,load=loadD,out=D);

    // ALU
    ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,zr=zr,ng=ng);

    // outM. not output directly from ALU,because of internal pin
    Or16(a=false,b=ALUout,out=outM);

    // writeM
    And(a=isC,b=instruction[3],out=writeM);

    // addressM
    Or16(a=false,b=A,out[0..14]=addressM);

    // PC
    // Calc isPositive
    Not(in=zr,out=nZr);
    Not(in=ng,out=nNg);
    And(a=nZr,b=nNg,out=isPositive);
    // JGT
    And(a=isPositive,b=instruction[0],out=JGT);
    // JEQ
    And(a=zr,b=instruction[1],out=JEQ);
    // JLT
    And(a=ng,b=instruction[2],out=JLT);
    // loadPc = JGT || JLT || JEQ
    Or(a=JGT,b=JLT,out=JNE);
    Or(a=JNE,b=JEQ,out=isJump);
    And(a=isC,b=isJump,out=loadPc);
    PC(in=A,load=loadPc,inc=true,reset=reset,out[0..14]=pc);

    //// Replace this comment with your code.
}
